package com.example.deepcopy;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;

import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@Component
public class DeepCopyUtil {

    public void copyProperties(Object source, Object target) {
        if (source == null || target == null) {
            return;
        }
        if (!source.getClass().equals(target.getClass())) {
            throw new IllegalArgumentException("Source and target must be of the same type");
        }

        Set<Object> visited = new HashSet<>();
        try {
            copyPropertiesRecursive(source, target, visited);
        } catch (IllegalAccessException | InstantiationException | InvocationTargetException e) {
            throw new RuntimeException("Error during properties copy", e);
        }
    }

    private void copyPropertiesRecursive(Object source, Object target, Set<Object> visited)
            throws IllegalAccessException, InstantiationException, InvocationTargetException {
        if (source == null || target == null) {
            return;
        }
        if (visited.contains(source)) {
            return; // Prevent infinite loops in case of circular references
        }
        visited.add(source);

        PropertyDescriptor[] propertyDescriptors = BeanUtils.getPropertyDescriptors(source.getClass());
        for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
            Method readMethod = propertyDescriptor.getReadMethod();
            Method writeMethod = propertyDescriptor.getWriteMethod();
            if (readMethod == null || writeMethod == null) {
                continue;
            }

            Object sourceValue = readMethod.invoke(source);
            if (sourceValue == null) {
                if (propertyDescriptor.getWriteMethod().getAnnotation(UpdateNull.class) != null) {
                    writeMethod.invoke(target, (Object) null);
                }
            } else {
                if (isPrimitiveOrWrapper(sourceValue.getClass()) || sourceValue instanceof String) {
                    writeMethod.invoke(target, sourceValue);
                } else {
                    if (sourceValue instanceof Collection) {
                        Collection<?> sourceCollection = (Collection<?>) sourceValue;
                        Collection<Object> targetCollection = (Collection<Object>) sourceCollection.getClass().newInstance();
                        for (Object item : sourceCollection) {
                            Object newItem = item.getClass().newInstance();
                            copyPropertiesRecursive(item, newItem, visited);
                            targetCollection.add(newItem);
                        }
                        writeMethod.invoke(target, targetCollection);
                    } else if (sourceValue instanceof Map) {
                        Map<?, ?> sourceMap = (Map<?, ?>) sourceValue;
                        Map<Object, Object> targetMap = (Map<Object, Object>) sourceMap.getClass().newInstance();
                        for (Map.Entry<?, ?> entry : sourceMap.entrySet()) {
                            Object newKey = entry.getKey().getClass().newInstance();
                            Object newValue = entry.getValue().getClass().newInstance();
                            copyPropertiesRecursive(entry.getKey(), newKey, visited);
                            copyPropertiesRecursive(entry.getValue(), newValue, visited);
                            targetMap.put(newKey, newValue);
                        }
                        writeMethod.invoke(target, targetMap);
                    } else {
                        Object newValue = sourceValue.getClass().newInstance();
                        copyPropertiesRecursive(sourceValue, newValue, visited);
                        writeMethod.invoke(target, newValue);
                    }
                }
            }
        }
    }

    private boolean isPrimitiveOrWrapper(Class<?> type) {
        return type.isPrimitive() ||
               type == Boolean.class || type == Integer.class || type == Character.class ||
               type == Byte.class || type == Short.class || type == Double.class ||
               type == Long.class || type == Float.class;
    }
}
